console.log( "=== +emoji options: setting load ===" )

import * as waves from 'waves';
import * as tt    from 'tooltip';
import Notify     from 'notify';
import Button     from 'button';
import Switch     from 'switch';
import TextField  from 'textfield';

export default class Setting extends React.Component {

    state = {
        error_trigger_prefix : "",
        error_trigger_suffix  : ""
    };

    onChange( value, key ) {
        this.props.options[key] = value;
    }

    onChangeBlacklist() {
        this.props.options.blacklist = event.target.value.split( "\n" );
    }

    onChangeTrigger( value, key ) {
        try {
            const reg = new RegExp( value );
            this.props.options[key] = value;
            this.setState({
                [ "error_" + key ] : ""
            });
        } catch ( error ) {
            this.setState({
                [ "error_" + key ] : "ËØ∑ËæìÂÖ•Ê≠£Á°ÆÁöÑÊ≠£ÂàôË°®ËææÂºè„ÄÇ"
            });
        }
    }

    onClick( type ) {
        console.log( this.props.options )
        if ( type == "set_settings" ) {
            browser.runtime.sendMessage({ id: type, value: { ...this.props.options } });
            new Notify().Render( "‰øùÂ≠òÊàêÂäüÔºåÊèíÂÖ•ÂäüËÉΩÂ¶ÇÈúÄÁîüÊïàÔºåÈúÄË¶ÅÂà∑Êñ∞È°µÈù¢ üòÄ" );
        } else {
            new Notify().Render( "snackbar", "ÊòØÂê¶Ê∏ÖÈô§ÂΩìÂâçÊï∞ÊçÆÂπ∂ÂàùÂßãÂåñÔºü", "Á°ÆËÆ§", ()=>{
                browser.runtime.sendMessage({ id: type, value: { ...this.props.options } });
                new Notify().Render( "Ê∏ÖÈô§ÊàêÂäüÔºå‰∏âÁßíÂêéÂΩìÂâçÈ°µÈù¢Ëá™Âä®Âà∑Êñ∞ üòÅ" );
                setTimeout( ()=> location.reload(), 3000 );
            });
        }
    }

    render() {
        return (
            <div>
                <Switch width="100%" checked={ this.props.options.blank }
                    thumbedColor="#94AC3C" trackedColor="#94AC3C" waves="md-waves-effect"
                    label="Âú®Â§çÂà∂ÊàñÊèíÂÖ• Emoji Êó∂ÊòØÂê¶ÂâçÂêéÂ¢ûÂä†‰∏Ä‰∏™Á©∫Ê†ºÔºü"
                    onChange={ (s)=>this.onChange(s, "blank" ) } />
                <Switch width="100%" checked={ this.props.options.clip }
                    thumbedColor="#94AC3C" trackedColor="#94AC3C" waves="md-waves-effect"
                    label="ÊèíÂÖ• Emoji ÂêéÊòØÂê¶‰πüÂêåÊó∂Â§çÂà∂Âà∞Ââ™ÂàáÊùøÔºü"
                    onChange={ (s)=>this.onChange(s, "clip" ) } />
                <Switch width="100%" checked={ this.props.options.clicked }
                    thumbedColor="#94AC3C" trackedColor="#94AC3C" waves="md-waves-effect"
                    label="Popup Tab Ê†èÊòØÂê¶ÂêØÁî®ÁÇπÂáªÂàáÊç¢ÔºüÔºàÈªòËÆ§‰∏∫Èº†Ê†áÊÇ¨ÂÅúÂàáÊç¢Ôºâ"
                    onChange={ (s)=>this.onChange(s, "clicked" ) } />
                <TextField 
                    multi={ false }
                    value={ this.props.options.trigger_prefix }
                    errortext={ this.state.error_trigger_prefix }
                    placeholder="ÊèíÂÖ• Emoji ÁöÑËß¶ÂèëÊù°‰ª∂ÔºåÈªòËÆ§‰∏∫ ‰∏≠Ëã±ÊñáÂèåÂÜíÂè∑Ôºå‰ªÖÊîØÊåÅÊ≠£ÂàôË°®ËææÂºè"
                    onChange={ (evt)=>this.onChangeTrigger(evt.target.value, "trigger_prefix" ) } />
                <TextField 
                        multi={ false }
                        value={ this.props.options.trigger_suffix }
                        errortext={ this.state.error_trigger_suffix }
                        placeholder="ÊèíÂÖ• Emoji ÁöÑÊõøÊç¢Êù°‰ª∂ÔºåÈªòËÆ§‰∏∫ Ëß¶ÂèëÊù°‰ª∂ + ‰∏≠Ëã±ÊñáÂÖ≥ÈîÆÂ≠ó + Á©∫Ê†ºÔºå‰æãÂ¶Ç ::face Êàñ ÔºöÔºöÁ¨ë Ôºå‰ªÖÊîØÊåÅÊ≠£ÂàôË°®ËææÂºè"
                        onChange={ (evt)=>this.onChangeTrigger(evt.target.value, "trigger_suffix" ) } />
                <div className="name">ÈªëÂêçÂçï</div>
                <TextField 
                    multi={ true } rows="5"
                    value={ this.props.options.blacklist.replace( /,/ig, "\n" ) }
                    onChange={ ()=>this.onChangeBlacklist() } />
                <Button type="raised" text="‰øùÂ≠ò"
                    style={{ "margin": "0" }}
                    color="#fff" backgroundColor="#9E9D24"
                    waves="md-waves-effect md-waves-button"
                    onClick={ ()=>this.onClick( "set_settings" ) } />
                <Button type="raised" text="ÂàùÂßãÂåñ"
                    style={{ "margin": "10px 0 0" }}
                    color="#fff" backgroundColor="#FF5252"
                    waves="md-waves-effect md-waves-button"
                    onClick={ ()=>this.onClick( "clear_settings" ) } />
            </div>
        )
    }
}